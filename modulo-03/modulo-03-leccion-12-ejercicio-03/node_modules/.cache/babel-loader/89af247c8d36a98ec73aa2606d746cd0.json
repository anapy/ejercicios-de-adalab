{"ast":null,"code":"var _jsxFileName = \"/home/anapy/Escritorio/adalab/ejercicios-de-adalab/modulo-03/modulo-03-leccion-12-ejercicio-03/src/components/Counter.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  console.log('Me estoy renderizando'); // usamos el hook useState para crear counter en el estado del componente\n\n  const [counter, setCounter] = useState(0); // usamos el hook useEffect para gestionar los ciclos de vida del componente\n\n  useEffect(() => {\n    console.log('Me estoy montando'); // las 3 siguientes líneas se ejecutan al montar y renderizar el componente\n\n    let intervalId = setInterval(() => {\n      setCounter(counter + 1);\n    }, 1000); // la función retornada a continuación se ejecuta al desmontar y renderizar el componente\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }\n  }, \"Contador: \", counter);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/anapy/Escritorio/adalab/ejercicios-de-adalab/modulo-03/modulo-03-leccion-12-ejercicio-03/src/components/Counter.js"],"names":["React","useState","useEffect","App","console","log","counter","setCounter","intervalId","setInterval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EADgB,CAEhB;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAAD,CAAtC,CAHgB,CAIhB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EADc,CAEd;;AACA,QAAIG,UAAU,GAAGC,WAAW,CAAC,MAAM;AACjCF,MAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACD,KAF2B,EAEzB,IAFyB,CAA5B,CAHc,CAMd;;AACA,WAAO,MAAM;AACXI,MAAAA,aAAa,CAACF,UAAD,CAAb;AACD,KAFD;AAGD,GAVQ,CAAT;AAWA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAgBF,OAAhB,CAAP;AACD,CAjBD;;AAmBA,eAAeH,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  console.log('Me estoy renderizando');\n  // usamos el hook useState para crear counter en el estado del componente\n  const [counter, setCounter] = useState(0);\n  // usamos el hook useEffect para gestionar los ciclos de vida del componente\n  useEffect(() => {\n    console.log('Me estoy montando');\n    // las 3 siguientes líneas se ejecutan al montar y renderizar el componente\n    let intervalId = setInterval(() => {\n      setCounter(counter + 1);\n    }, 1000);\n    // la función retornada a continuación se ejecuta al desmontar y renderizar el componente\n    return () => {\n      clearInterval(intervalId);\n    };\n  });\n  return <div>Contador: {counter}</div>;\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}